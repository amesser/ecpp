#! /usr/bin/env python
# encoding: utf-8
#
# ecpp library build script
#
# Copyright 2013 Andreas Messer <andi@bastelmap.de>
#
# This file is part of the Embedded C++ Platform Project.
#
# Embedded C++ Platform Project (ECPP) is free software: you can
# redistribute it and/or modify it under the terms of the GNU General
# Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later
# version.
#
# Embedded C++ Platform Project is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ECPP.  If not, see <http://www.gnu.org/licenses/>.
#
# As a special exception, the copyright holders of ECPP give you
# permission to link ECPP with independent modules to produce an
# executable, regardless of the license terms of these independent
# modules, and to copy and distribute the resulting executable under
# terms of your choice, provided that you also meet, for each linked
# independent module, the terms and conditions of the license of that
# module.  An independent module is a module which is not derived from
# or based on ECPP.  If you modify ECPP, you may extend this exception
# to your version of ECPP, but you are not obligated to do so.  If you
# do not wish to do so, delete this exception statement from your
# version.
def configure(conf):
    conf.setenv('')
    conf.env.append_value('INCLUDES', [conf.path.abspath()])
    # conf.env.append_value('STLIB_ecpp', 'ecpp')

def build(bld):
    source_common = [
      'ecpp/Abi/Elf.cpp',
      'ecpp/Abi/SimpleBinFormat.cpp',
      'ecpp/String.cpp',
      'ecpp/Time.cpp',
      'ecpp/Text/Utf8.cpp',
      'ecpp/Ui/Text/Painter.cpp',
    ] \
      + bld.path.ant_glob('ecpp/Peripherals/**/*.cpp') \
      + bld.path.ant_glob('ecpp/StringEncodings/**/*.cpp')

    sourcefiles = {
        'avr-' : [
            'ecpp/Target/AVR8/Memory.cpp',
            'ecpp/Target/AVR8/TWI.cpp',
        ],

        'default' : [
            'common/syscalls.cc',
        ],
    }

    sourcefiles_device = {
        'atsam4s8b' : bld.path.ant_glob('ecpp/HAL/ARM/*.cpp') +
                      bld.path.ant_glob('ecpp/HAL/ATSAM4S/*.cpp'),
    }

    for id,env in bld.all_envs.items():
        if env['ECPP_BUILDLIB']:
          if not env.get_flat('ECPP_BUILDID'):
              bld.fatal('build id not set for environment "%s"' % id)

          prefix = env['TOOL_PREFIX']

          source_target = sourcefiles.get(prefix, sourcefiles['default'])

          source_device = sourcefiles_device.get(env.DEVICE, [])

          tg = bld.ecpp_build(
              id       = id,
              target   = 'ecpp',
              source   = source_target + source_device + source_common,
              features = 'cxx cxxstlib'
          )
